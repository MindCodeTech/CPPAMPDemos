/*
	FOR GETTING MORE INFORMATION ABOUT THIS CODE PLEASE CHECK http://directx11-1-gameprogramming.azurewebsites.net/
	THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF
	ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO
	THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A
	PARTICULAR PURPOSE.
	Copyright (c) Microsoft Corporation. All rights reserved

	File Name        : Game.cpp
	Generated by     : Pooya Eimandar (http://Pooya-Eimandar.com/)
	File Description :
*/

#include "pch.h"
#include "..\DXHelper.h"
#include "..\Game.h"

concurrency::accelerator_view  AMP::accViewObj = concurrency::accelerator().default_view;

Game::Game(Windows::UI::Core::CoreWindow^ coreWindow)
{
	this->coreWindow = coreWindow;
}

void Game::Initialize()
{
	this->COMPOSED_WITH_XAML = false;
	Load();
}

void Game::Initialize(Windows::UI::Xaml::Controls::SwapChainBackgroundPanel^ swapChainPanel)
{
	COMPOSED_WITH_XAML = true;
	this->swapChainPanel = swapChainPanel;
	Load();
}

void Game::Load()
{
#pragma region Load

	CreateDevice();
	CreateWindowSize();

#pragma endregion
}

void Game::HandleDeviceLost()
{
#pragma region OnLosingDevice

	// Reset these member variables
	windowBounds.Width = 0;
	windowBounds.Height = 0;
	swapChain = nullptr;
	CreateDevice();
	WindowSizeChanged();

#pragma endregion
}

void Game::CreateDevice()
{
#pragma region Create _3D Device and Context

	auto hr =  S_FALSE;
	UINT creationFlags = D3D11_CREATE_DEVICE_BGRA_SUPPORT;

#if defined(_DEBUG)
	// For debugging
	creationFlags |= D3D11_CREATE_DEVICE_DEBUG;
	//creationFlags |= D3D11_CREATE_DEVICE_DEBUGGABLE;
#endif

	D3D_FEATURE_LEVEL featureLevels[] = 
	{
		D3D_FEATURE_LEVEL_11_1,
		D3D_FEATURE_LEVEL_11_0,
		D3D_FEATURE_LEVEL_10_1,
		D3D_FEATURE_LEVEL_10_0,
		D3D_FEATURE_LEVEL_9_3,
		D3D_FEATURE_LEVEL_9_2,
		D3D_FEATURE_LEVEL_9_1
	};

	// Create the Direct3D 11 API device object and a corresponding context.
	auto G3D = &this->GDevice.G3D;
	auto G2D = &this->GDevice.G2D;

	ComPtr<ID3D11Device> device;
	ComPtr<ID3D11DeviceContext> context;
		
	hr = D3D11CreateDevice(
			nullptr,
			D3D_DRIVER_TYPE_HARDWARE,
			nullptr,
			creationFlags, 
			featureLevels, 
			ARRAYSIZE(featureLevels),
			D3D11_SDK_VERSION, 
			&device, 
			&featureLevel,
			&context);	
	DXHelper::ThrowIfFailed(hr);

	// Get 3D Device
	hr = device.As(&G3D->device);
	DXHelper::ThrowIfFailed(hr);
	//Get 3D context
	hr = context.As(&G3D->context);
	DXHelper::ThrowIfFailed(hr);

#pragma endregion

#pragma region Create Amp Accelerator

	AMP::accViewObj = concurrency::direct3d::create_accelerator_view(reinterpret_cast<IUnknown *>(device.Get()));
	for (int i = 0; i < AMP::accViewObj.accelerator.description.length(); i++)
	{
		this->defaultAcceleratorName +=	AMP::accViewObj.accelerator.description[i];
	}

#pragma endregion

#pragma region Create _2D Device and Context

	D2D1_FACTORY_OPTIONS factory2DOptions;
	ZeroMemory(&factory2DOptions, sizeof(D2D1_FACTORY_OPTIONS));

#if defined(_DEBUG)
	factory2DOptions.debugLevel = D2D1_DEBUG_LEVEL_INFORMATION;
#endif

	//Create Direct2D factory
	hr = D2D1CreateFactory(D2D1_FACTORY_TYPE_SINGLE_THREADED, __uuidof(ID2D1Factory1), &factory2DOptions, &G2D->factory );
	DXHelper::ThrowIfFailed(hr);

	//Create DirectWrite factory
	hr = DWriteCreateFactory(DWRITE_FACTORY_TYPE_SHARED, __uuidof(IDWriteFactory), &G2D->writeFactory );
	DXHelper::ThrowIfFailed(hr);

	//Get IDXGIDevice
	ComPtr<IDXGIDevice> dxgiDevice;
	hr = G3D->device.As(&dxgiDevice);
	DXHelper::ThrowIfFailed(hr);

	//Create 2D Device from 2D factory
	hr = G2D->factory->CreateDevice(dxgiDevice.Get(), &G2D->device);
	DXHelper::ThrowIfFailed(hr);

	//Create 2D context from 2D device
	hr = G2D->device->CreateDeviceContext(D2D1_DEVICE_CONTEXT_OPTIONS_NONE, &G2D->context);
	DXHelper::ThrowIfFailed(hr);

#pragma endregion

#pragma region Load Resources of _3D device

	this->GDevice.Load();

#pragma endregion
}

// Allocate all memory resources that change on a window SizeChanged event.
void Game::CreateWindowSize()
{ 
	auto hr = S_FALSE;
	
	auto G3D = this->GDevice.G3D;
	auto G2D = this->GDevice.G2D;

	// Store the window bounds so the next time we get a SizeChanged event we can
	// avoid rebuilding everything if the size is identical.
	windowBounds = this->coreWindow->Bounds;

	renderTargetSize.Width = windowBounds.Width;
	renderTargetSize.Height = windowBounds.Height;

	//Set aspect ratio
	this->GDevice.AspectRatio = windowBounds.Width / windowBounds.Height;

	if(swapChain != nullptr)
	{
#pragma region Resize swap chain

		// If the swap chain already exists, resize it.
		auto hr = swapChain->ResizeBuffers(
			2, // Double-buffered swap chain.
			static_cast<UINT>(renderTargetSize.Width),
			static_cast<UINT>(renderTargetSize.Height),
			DXGI_FORMAT_B8G8R8A8_UNORM,
			0);
		DXHelper::ThrowIfFailed(hr);

#pragma endregion
	}
	else
	{
#pragma region Create swap chain

		// Otherwise, create a new one using the same adapter as the existing Direct3D device.
		DXGI_SWAP_CHAIN_DESC1 swapChainDesc = {0};
		swapChainDesc.Width = static_cast<UINT>(renderTargetSize.Width); // Match the size of the window.
		swapChainDesc.Height = static_cast<UINT>(renderTargetSize.Height);
		swapChainDesc.Format = DXGI_FORMAT_B8G8R8A8_UNORM; // This is the most common swap chain format.
		swapChainDesc.Stereo = false;
		swapChainDesc.SampleDesc.Count = 1; // Don't use multi-sampling.
		swapChainDesc.SampleDesc.Quality = 0;
		swapChainDesc.BufferUsage = DXGI_USAGE_RENDER_TARGET_OUTPUT;
		swapChainDesc.BufferCount = 2; // Use double-buffering to minimize latency.
		swapChainDesc.Scaling = this->COMPOSED_WITH_XAML ? DXGI_SCALING_STRETCH : DXGI_SCALING_NONE;
		swapChainDesc.SwapEffect = DXGI_SWAP_EFFECT_FLIP_SEQUENTIAL; // All Windows Store apps must use this SwapEffect.
		swapChainDesc.Flags = 0;

		ComPtr<IDXGIDevice1>  dxgiDevice;
		hr = G3D.device.As(&dxgiDevice);
		DXHelper::ThrowIfFailed(hr);

		ComPtr<IDXGIAdapter> dxgiAdapter;
		hr = dxgiDevice->GetAdapter(&dxgiAdapter);
		DXHelper::ThrowIfFailed(hr);

		ComPtr<IDXGIFactory2> dxgiFactory;
		hr = dxgiAdapter->GetParent(__uuidof(IDXGIFactory2), &dxgiFactory);
		DXHelper::ThrowIfFailed(hr);

		if (COMPOSED_WITH_XAML)
		{
			hr = dxgiFactory->CreateSwapChainForComposition(
				G3D.device.Get(),
				&swapChainDesc,
				nullptr,    // allow on all displays
				&this->swapChain);
			DXHelper::ThrowIfFailed(hr);

			ComPtr<ISwapChainBackgroundPanelNative> dxRootPanelAsNative;

			// set the swap chain on the SwapChainBackgroundPanel
			reinterpret_cast<IUnknown*>(this->swapChainPanel)->QueryInterface(__uuidof(ISwapChainBackgroundPanelNative), (void**)&dxRootPanelAsNative);
			dxRootPanelAsNative->SetSwapChain(swapChain.Get());
			DXHelper::ThrowIfFailed(hr);
		}
		else
		{
			auto window = this->coreWindow.Get();
			hr = dxgiFactory->CreateSwapChainForCoreWindow(
				G3D.device.Get(),
				reinterpret_cast<IUnknown*>(window),
				&swapChainDesc,
				nullptr, // Allow on all displays.
				&this->swapChain);
			DXHelper::ThrowIfFailed(hr);
		}




#pragma endregion

		hr = dxgiDevice->SetMaximumFrameLatency(1);
		DXHelper::ThrowIfFailed(hr);
	}

#pragma region Create back buffer, depth-stencil & view port

	// Create a render target view of the swap chain back buffer.
	ComPtr<ID3D11Texture2D> backBuffer;
	hr = swapChain->GetBuffer(0, __uuidof(ID3D11Texture2D), &backBuffer);
	DXHelper::ThrowIfFailed(hr);

	hr = G3D.device->CreateRenderTargetView(backBuffer.Get(), nullptr, &renderTargetView);
	DXHelper::ThrowIfFailed(hr);

	// Create a depth stencil view.
	CD3D11_TEXTURE2D_DESC depthStencilDesc(
		DXGI_FORMAT_D24_UNORM_S8_UINT, 
		static_cast<UINT>(renderTargetSize.Width),
		static_cast<UINT>(renderTargetSize.Height),
		1,
		1,
		D3D11_BIND_DEPTH_STENCIL);

	ComPtr<ID3D11Texture2D> depthStencil;
	hr = G3D.device->CreateTexture2D(&depthStencilDesc, nullptr, &depthStencil);
	DXHelper::ThrowIfFailed(hr);

	CD3D11_DEPTH_STENCIL_VIEW_DESC depthStencilViewDesc(D3D11_DSV_DIMENSION_TEXTURE2D);
	hr = G3D.device->CreateDepthStencilView(depthStencil.Get(), &depthStencilViewDesc, &depthStencilView );
	DXHelper::ThrowIfFailed(hr);

	// Set the rendering viewport to target the entire window.
	CD3D11_VIEWPORT viewport(
		0.0f,
		0.0f,
		renderTargetSize.Width,
		renderTargetSize.Height);

	G3D.context->RSSetViewports(1, &viewport);

#pragma endregion

#pragma region Create Direct2D Target

	D2D1_BITMAP_PROPERTIES1 bitmapProperties = D2D1::BitmapProperties1(
		D2D1_BITMAP_OPTIONS_TARGET | D2D1_BITMAP_OPTIONS_CANNOT_DRAW,
		D2D1::PixelFormat(DXGI_FORMAT_B8G8R8A8_UNORM, D2D1_ALPHA_MODE_PREMULTIPLIED),
		96, 96);

	ComPtr<IDXGISurface> dxgiBackBuffer;
	hr = this->swapChain->GetBuffer(0, IID_PPV_ARGS(&dxgiBackBuffer));
	DXHelper::ThrowIfFailed(hr);

	ComPtr<ID2D1Bitmap1> d2dTarget;
	hr = G2D.context->CreateBitmapFromDxgiSurface(dxgiBackBuffer.Get(), &bitmapProperties, &d2dTarget );
	DXHelper::ThrowIfFailed(hr);

	G2D.context->SetTarget(d2dTarget.Get());

	// Grayscale text anti-aliasing is recommended for all Metro style apps.
	G2D.context->SetTextAntialiasMode(D2D1_TEXT_ANTIALIAS_MODE_GRAYSCALE);

#pragma endregion
}

// This method is called in the event handler for the SizeChanged event.
void Game::WindowSizeChanged()
{
#pragma region OnWindowSize changed

	if (this->coreWindow->Bounds.Width  != windowBounds.Width ||
		this->coreWindow->Bounds.Height != windowBounds.Height)
	{
		auto G3D = this->GDevice.G3D;
		auto G2D = this->GDevice.G2D;

		G2D.context->SetTarget(nullptr);
		G2D.factory = nullptr;
		G2D.context->Flush();

		ID3D11RenderTargetView* nullViews[] = {nullptr};
		G3D.context->OMSetRenderTargets(ARRAYSIZE(nullViews), nullViews, nullptr);
		this->renderTargetView = nullptr;
		this->depthStencilView = nullptr;
		G3D.context->Flush();
		CreateWindowSize();
	}

#pragma endregion
}

// Method to deliver the final image to the display.
void Game::Render()
{
#pragma region Present

	auto G3D = this->GDevice.G3D;

	DXGI_PRESENT_PARAMETERS parameters = {0};
	parameters.DirtyRectsCount = 0;
	parameters.pDirtyRects = nullptr;
	parameters.pScrollRect = nullptr;
	parameters.pScrollOffset = nullptr;

	HRESULT hr = swapChain->Present1(1, 0, &parameters);
	G3D.context->DiscardView(renderTargetView.Get());
	G3D.context->DiscardView(depthStencilView.Get());

	if (hr == DXGI_ERROR_DEVICE_REMOVED)
	{
		HandleDeviceLost();
	}
	else
	{
		DXHelper::ThrowIfFailed(hr);
	}

#pragma endregion
}


