/*
	FOR GETTING MORE INFORMATION ABOUT THIS CODE PLEASE CHECK http://directx11-1-gameprogramming.azurewebsites.net/
	THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF
	ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO
	THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A
	PARTICULAR PURPOSE.
	Copyright (c) Microsoft Corporation. All rights reserved

	File Name        : TriangleObj.cpp
	Generated by     : Pooya Eimandar (http://Pooya-Eimandar.com/)
	File Description :
*/

#include "pch.h"
#include "FrameWork\DXHelper.h"
#include "..\TriangleObj.h"

using namespace DirectX;
using namespace Concurrency;
using namespace Microsoft::WRL;

TriangleObj::TriangleObj(ID3D11Device1* d3dDevice) : stride(sizeof(VertexTypes::VertexPositionNormalTexture)), offset(0)
{
	this->d3dDevice = d3dDevice;
}

task<void> TriangleObj::Load()
{
	return create_task([=] 
	{
#pragma region Create Vertex Buffer

		const VertexTypes::VertexPositionNormalTexture Vertices[] = 
		{
			{ XMFLOAT3( -1.0f, -1.0f, 0.0f) ,  XMFLOAT3( 0.0f,  1.0f, 0.0f) , XMFLOAT2( 1.0f, 0.0f ) },
			{ XMFLOAT3(  0.0f,  1.0f, 0.0f) ,  XMFLOAT3( 0.0f,  1.0f, 0.0f) , XMFLOAT2( 0.0f, 1.0f ) },
			{ XMFLOAT3(  1.0f, -1.0f, 0.0f) ,  XMFLOAT3( 0.0f,  1.0f, 0.0f) , XMFLOAT2( 0.0f, 0.0f ) },
		};

		D3D11_BUFFER_DESC vertexBufferDesc = {0};
		vertexBufferDesc.ByteWidth = sizeof(VertexTypes::VertexPositionNormalTexture) * ARRAYSIZE(Vertices);
		vertexBufferDesc.Usage = D3D11_USAGE_DEFAULT;
		vertexBufferDesc.BindFlags = D3D11_BIND_VERTEX_BUFFER;
		vertexBufferDesc.CPUAccessFlags = 0;
		vertexBufferDesc.MiscFlags = 0;
		vertexBufferDesc.StructureByteStride = 0;

		D3D11_SUBRESOURCE_DATA vertexBufferData;
		vertexBufferData.pSysMem = Vertices;
		vertexBufferData.SysMemPitch = 0;
		vertexBufferData.SysMemSlicePitch = 0;

		ComPtr<ID3D11Buffer> vertexBuffer;	
		HRESULT hr = this->d3dDevice->CreateBuffer(&vertexBufferDesc, &vertexBufferData, &this->vertexBuffer);
		DXHelper::ThrowIfFailed(hr);

#pragma endregion

#pragma region Create Index Buffer

		const unsigned short Indices[] = {  0, 1, 2 };
		this->indicesSize = ARRAYSIZE(Indices);

		D3D11_BUFFER_DESC indexBufferDesc;
		indexBufferDesc.ByteWidth = sizeof(unsigned short) * ARRAYSIZE(Indices);
		indexBufferDesc.Usage = D3D11_USAGE_DEFAULT;
		indexBufferDesc.BindFlags = D3D11_BIND_INDEX_BUFFER;
		indexBufferDesc.CPUAccessFlags = 0;
		indexBufferDesc.MiscFlags = 0;
		indexBufferDesc.StructureByteStride = 0;

		D3D11_SUBRESOURCE_DATA indexBufferData;
		indexBufferData.pSysMem = Indices;
		indexBufferData.SysMemPitch = 0;
		indexBufferData.SysMemSlicePitch = 0;

		hr = this->d3dDevice->CreateBuffer(&indexBufferDesc, &indexBufferData, &this->indexBuffer);
		DXHelper::ThrowIfFailed(hr);

#pragma endregion
	});
}

void TriangleObj::Render(ID3D11DeviceContext1* d3dContext)
{
	d3dContext->IASetVertexBuffers(0, 1, this->vertexBuffer.GetAddressOf(), &this->stride, &this->offset );
	d3dContext->IASetIndexBuffer( this->indexBuffer.Get(), DXGI_FORMAT_R16_UINT, 0 );
	d3dContext->IASetPrimitiveTopology(D3D_PRIMITIVE_TOPOLOGY_3_CONTROL_POINT_PATCHLIST);
	d3dContext->DrawIndexed(this->indicesSize, 0, 0 );
}