/*
	FOR GETTING MORE INFORMATION ABOUT THIS CODE PLEASE CHECK http://directx11-1-gameprogramming.azurewebsites.net/
	THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF
	ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO
	THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A
	PARTICULAR PURPOSE.
	Copyright (c) Microsoft Corporation. All rights reserved

	File Name        : BaseCamera.h
	Generated by     : Pooya Eimandar (http://Pooya-Eimandar.com/)
	File Description :
*/

#include "pch.h"
#include "FrameWork\DXHelper.h"
#include "..\BaseCamera.h"

using namespace DirectX;
using namespace MathHelper;

BaseCamera::BaseCamera(float aspectRatio) : Up(XMFLOAT3(0,1,0)), fieldOfView(70.0f), nearPlane(0.01f), farPlane(1000.0f)
{
	this->aspectRatio = aspectRatio;
	UpdateView();
	UpdateProjection();
}

void BaseCamera::UpdateView()
{
	this->direction = Normalize(XMFLOAT3(this->lookAt.x - this->position.x, this->lookAt.y - this->position.y, this->lookAt.z - this->position.z));
	XMFLOAT3 zAxis = XMFLOAT3(-1 * this->direction.x, -1 * this->direction.y, -1 * this->direction.z);
	XMFLOAT3 xAxis = Normalize(Cross(Up, zAxis));
	XMFLOAT3 yAxis = Cross(zAxis, xAxis);
	float xOffset = -Dot(xAxis, this->position);
	float yOffset = -Dot(yAxis, this->position);
	float zOffset = -Dot(zAxis, this->position);
	this->viewMatrix = XMFLOAT4X4(
		xAxis.x, xAxis.y, xAxis.z, xOffset,
		yAxis.x, yAxis.y, yAxis.z, yOffset,
		zAxis.x, zAxis.y, zAxis.z, zOffset,
		0.0f,    0.0f,    0.0f,    1.0f);
}

void BaseCamera::UpdateProjection()
{
	float minScale = 1.0f / tan(this->fieldOfView * XM_PI / 360.0f);
	float xScale = 1.0f;
	float yScale = 1.0f;
	if (aspectRatio < 1.0f)
	{
		xScale = minScale;
		yScale = minScale * aspectRatio;
	}
	else
	{
		xScale = minScale / aspectRatio;
		yScale = minScale;
	}
	float zScale = farPlane / (farPlane - nearPlane);
	this->projectionMatrix = XMFLOAT4X4(
		xScale, 0.0f,   0.0f,    0.0f,
		0.0f,   yScale, 0.0f,    0.0f,
		0.0f,   0.0f,   -zScale, -nearPlane*zScale,
		0.0f,   0.0f,   -1.0f,   0.0f);
}

void BaseCamera::Update()
{
	this->rotationMatrix = XMMatrixTranspose(XMMatrixRotationX(this->rotation.x) * XMMatrixRotationY(this->rotation.y));
}
