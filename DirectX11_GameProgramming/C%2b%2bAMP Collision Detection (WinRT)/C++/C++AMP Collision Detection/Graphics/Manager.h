/*
	FOR GETTING MORE INFORMATION ABOUT THIS CODE PLEASE CHECK http://directx11-1-gameprogramming.azurewebsites.net/
	THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF
	ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO
	THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A
	PARTICULAR PURPOSE.
	Copyright (c) Microsoft Corporation. All rights reserved

	File Name        : Manager.h
	Generated by     : Pooya Eimandar (http://Pooya-Eimandar.com/)
	File Description :
*/

#pragma once

#include "Model.h"
#include "Billboard.h"
#include "FrameWork\Media\MediaEngine.h"
#include "FrameWork\Media\XSound.h"

ref class Manager
{
private:
	UINT activeIndex;
	std::vector<Model^> models;
	std::vector<DirectX::XMFLOAT3> positions;
	std::vector<DirectX::XMFLOAT3> rotations;
	std::vector<DirectX::XMFLOAT3> infos;//x=random number, y=teta, z=velocity
	std::vector<DirectX::XMFLOAT4X4> worlds;

	std::vector<Billboard^> billboards;
	MediaEngine^ mediaEngine;
	XSound^ xSound;
	void RenderModel(Model^ model);
internal:
	Manager();
	Concurrency::task<void> LoadModel(GraphicsDevice GDevice, Platform::String^ ModelPath);
	Concurrency::task<void> LoadModel(GraphicsDevice GDevice, Platform::String^ ModelPath, Platform::String^ BumpMapPath , Platform::String^ SpecMapPath,
		DirectX::XMFLOAT3 InitialPosition, DirectX::XMFLOAT3 InitialRotation);
	Concurrency::task<void> LoadBillboard(GraphicsDevice GDevice);
	void LoadSound(Platform::String^ soundName);
	void PlaySound();
	void UpdateActiveModel(DirectX::XMFLOAT3 transfome, float Yaw );
	void UpdateModels( float time );
	void RenderModels( GraphicsDevice GDevice );
	void UpdateBillboards();
	void RenderBillboards( GraphicsDevice GDevice, float Time);
	void Unload();	
	property int ActiveIndex
	{
		int get()
		{
			return this->activeIndex;
		}
		void set(int val)
		{
			if (val < 0)
			{
				val = this->models.size() - 1;
			}
			val %= this->models.size();
			this->activeIndex = val;
		}
	};
	property DirectX::XMFLOAT3 ActivePositionModel
	{
		DirectX::XMFLOAT3 get()
		{
			if(this->models.size() > 0)
			{
				return this->positions[activeIndex];
			}
			return DirectX::XMFLOAT3();
		}
	};
	property float ActiveYawModel
	{
		float get()
		{
			if(this->models.size() > 0)
			{
				return this->rotations[activeIndex].y;
			}
			return 0;
		}
	};
	property UINT ActiveTotalTriangles
	{
		UINT get()
		{
			if(this->models.size() > 0)
			{
				return this->models[this->activeIndex]->Triangles;
			}
			return 0;
		}
	};
};

