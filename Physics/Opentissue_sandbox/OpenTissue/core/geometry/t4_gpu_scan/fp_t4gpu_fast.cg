void main(
             in float3 local       : TEXCOORD0,
            out float4 dist        : COLOR0,
            out float  absDist     : DEPTH,
  const uniform float3 triangle,
  const uniform float3 nv0,
  const uniform float3 nv1,
  const uniform float3 nv2,
  const uniform float3 ne0,
  const uniform float3 ne1,
  const uniform float3 ne2,
  const uniform float  narrowband)
{
  //--- Extract vector component into temporaries in order to make code more readable
  float a = triangle.x;
  float b = triangle.y;
  float h = triangle.z;

  float r = local.x;
  float s = local.y;
  float t = local.z;

  //--- Initialize helper normals
  float3 nv = nv1;
  float3 ne = ne1;

  //--- Normalize to half-space r >= 0
  if (r<0)
  {
    r = -r;
    a =  b;
    nv = nv0;
    ne = ne2;
  }

  //float4 ahrs = float4(a,h,r,s);

  //--- Transform to a 2nd coordinate frame
  float lensqr = (a*a + h*h);
  float rprime = (a*r + h*h - h*s)/lensqr;
  float sprime = (a*s + h*r - h*a)/lensqr;

  //--- region I
  float3 c = float3(0,0,0);
  float3 n = float3(0,0,1);

  if( s<0 )
  {
    //--- region III or II
    c.x = a;
    n = (r>a)?nv:ne0;
  }
  else
  if(sprime>0)
  {
    if(rprime<0)
    {
      //--- region VI
      c.y = h;
      n = nv2;
    }
    else
    {
      //--- region IV or V
      c.x = a;
      n = (rprime>1)?nv:ne;
    }
  }

  //--- Extract Components of the distance vector
  rprime = max( max(-rprime,0),rprime-1);  // regions IV, V, VI
  sprime = max(sprime,0);                  // regions I, V
  r      = max(r-a,0);                     // regions II, III

  //--- Compute the distance
  float tmp = (s<0)?(r*r + s*s):((rprime*rprime + sprime*sprime)*lensqr);
  absDist = sqrt( tmp + t*t);

  //--- Place sign
  float sign_tst = sign(dot(n,(local-c)));
  dist = float4(sign_tst*absDist,local);

  absDist /= narrowband;  //--- z-buffer is clamped to 0..1, so we need to rescale values
}
