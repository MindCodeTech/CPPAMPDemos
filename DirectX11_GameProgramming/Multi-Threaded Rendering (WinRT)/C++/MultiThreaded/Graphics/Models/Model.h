/*
	FOR GETTING MORE INFORMATION ABOUT THIS CODE PLEASE CHECK http://directx11-1-gameprogramming.azurewebsites.net/ 
	THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF
	ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO
	THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A
	PARTICULAR PURPOSE.
    Copyright (c) Microsoft Corporation. All rights reserved

	File Name        : Model.h
	Generated by     : Pooya Eimandar (http://Pooya-Eimandar.com/)
	File Description : This class responsible for loading CMO file. The code modified based on Visual Studio 3D Starter Kit "http://code.msdn.microsoft.com/Visual-Studio-3D-Starter-455a15f1"
 */
#pragma once

#include "Graphics/Shaders/Shader.h"
#include "Graphics/Textures/Texture2D.h"
#include "Graphics/Shaders/CBuffer.h"

#define MaxTextures  8

struct Triangle
{
	XMFLOAT3 points[3];
};

struct BoundingSphere
{
	DirectX::XMFLOAT3 Center;
	float Radius;
	DirectX::XMFLOAT3 Min;
	DirectX::XMFLOAT3 Max;
	BoundingSphere() : Center(0,0,0), Radius(0), Min(0,0,0), Max(0,0,0) {}
};

struct SubMesh
{
	UINT MaterialIndex;
	UINT IndexBufferIndex;
	UINT VertexBufferIndex;
	UINT StartIndex;
	UINT PrimCount;
	SubMesh() : MaterialIndex(0), IndexBufferIndex(0), VertexBufferIndex(0), StartIndex(0), PrimCount(0) {}
};


struct MaterialVars
{
	DirectX::XMFLOAT4   Ambient;
	DirectX::XMFLOAT4   Diffuse;
	DirectX::XMFLOAT4   Specular;
	DirectX::XMFLOAT4   Emissive;
	float               SpecularPower;
	DirectX::XMFLOAT3   Paddings;

	MaterialVars()
	{
		using namespace DirectX;

		Ambient = XMFLOAT4(0.0f,0.0f,0.0f,1.0f);
		Diffuse = XMFLOAT4(1.0f,1.0f,1.0f,1.0f);
		Specular = XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f);
		Emissive = XMFLOAT4(0.0f, 0.0f, 0.0f, 0.0f);
		SpecularPower = 1.0f;
		Paddings = XMFLOAT3(0.0f, 0.0f, 0.0f);
	}
};

struct LightVars
{
	DirectX::XMFLOAT4   AmbientLight;
	DirectX::XMFLOAT4   LightColor[4];
	DirectX::XMFLOAT4   LightAttenuation[4];
	DirectX::XMFLOAT4   LightDirection[4];
	DirectX::XMFLOAT4   LightSpecularIntensity[4];
	UINT                IsPointLight[16];
	UINT                ActiveLights;
	DirectX::XMFLOAT3   Paddings;

	LightVars()
	{
		ZeroMemory(this, sizeof(LightVars));
		AmbientLight = DirectX::XMFLOAT4(1.0f,1.0f,1.0f,1.0f);
	}
};

struct ObjectVars
{
	DirectX::XMMATRIX   LocalToWorld4x4;
	DirectX::XMMATRIX   LocalToProjected4x4;
	DirectX::XMMATRIX   WorldToLocal4x4;
	DirectX::XMMATRIX   WorldToView4x4;
	DirectX::XMMATRIX   UvTransform4x4;
	DirectX::XMFLOAT3   EyePosition;
	float               Padding;

	ObjectVars()
	{
		ZeroMemory(this, sizeof(ObjectVars));
	}
};

struct Material
{
	Shader^ shader;
	Texture2D^ texture;
	MaterialVars Const;
	DirectX::XMFLOAT4X4 UVTransform;
	Material() : shader(nullptr), texture(nullptr) 
	{
	}
};

ref class Model
{
internal:
	Model();
	void Load(FILE* f);
	void Update(float time);
	void Render();
	void Render(ID3D11DeviceContext1* context);
	void Unload();

	DirectX::XMFLOAT3 Rotation;
	property DirectX::XMFLOAT3 Position
	{
		DirectX::XMFLOAT3 get()
		{
			return this->boundingSphere.Center;
		}
		void set(DirectX::XMFLOAT3 val)
		{
			this->boundingSphere.Center = val;
		}
	}
	property DirectX::XMMATRIX World
	{
		DirectX::XMMATRIX get()
		{
			return this->world;
		}
	}
public:
	property int Triangles
	{
		int get()
		{
			return this->triangles.size();
		}
	}
private:
	bool loadingComplete;
	Platform::String^ Name;
	DirectX::XMMATRIX world;
	std::vector<SubMesh> subMeshes;
	std::vector<Material> materials;
	std::vector<ID3D11Buffer*> vertexBuffers;
	std::vector<ID3D11Buffer*> indexBuffers;
	std::vector<Triangle> triangles;
	BoundingSphere boundingSphere;
	CBuffer<ObjectVars> CObjectVars;
	CBuffer<MaterialVars> CMaterialVars;
	CBuffer<LightVars> CLightVars;
	UINT stride;
};
