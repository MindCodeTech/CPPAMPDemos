/*
	FOR GETTING MORE INFORMATION ABOUT THIS CODE PLEASE CHECK http://directx11-1-gameprogramming.azurewebsites.net/
	THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF
	ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO
	THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A
	PARTICULAR PURPOSE.
	Copyright (c) Microsoft Corporation. All rights reserved

	File Name        : Billboard.cpp
	Generated by     : Pooya Eimandar (http://Pooya-Eimandar.com/)
	File Description :
*/

#include "pch.h"
#include "FrameWork\DXHelper.h"
#include "..\Billboard.h"

using namespace Concurrency;
using namespace Platform;
using namespace DirectX;

Billboard::Billboard() : position(XMFLOAT3(0, 0, 0))
{
}

task<void> Billboard::LoadAsync(GraphicsDevice GDevice)
{
	std::vector<task<void>> tasks;

	auto G3D = GDevice.G3D;
	
	this->texture0 = ref new Texture();
	this->texture1 = ref new Texture();
	this->texture2 = ref new Texture();

	this->shader =  ref new Shader(G3D, false);

	tasks.push_back(this->texture0->LoadAsync(G3D, "Assets\\Textures\\FireBase.dds"));
	tasks.push_back(this->texture1->LoadAsync(G3D, "Assets\\Textures\\FireDistortion.dds"));
	tasks.push_back(this->texture2->LoadAsync(G3D, "Assets\\Textures\\FireOpacity.dds"));

	tasks.push_back(this->shader->LoadAsync(L"BillboardVShader.cso", L"BillboardPShader.cso",
		L"BillboardGShader.cso", nullptr, nullptr, VertexTypes::PositionNormalTexture));

	return when_all(tasks.begin(), tasks.end()).then([=] ()
	{
		this->squareObj = ref new SquareObj(G3D.device.Get());
		this->squareObj->Load();
		this->shader->SetParameter(this->texture0, 0, 1);
		this->shader->SetParameter(this->texture1, 1, 1);
		this->shader->SetParameter(this->texture2, 2, 1);
	});
}

void Billboard::Update()
{
	//Update world
	auto _world = XMMatrixTranspose(XMMatrixTranslation(this->position.x, this->position.y, this->position.z) );
	XMStoreFloat4x4(&this->world, _world );
}

void Billboard::Render(GraphicsDevice GDevice, float Time)
{
	GDevice.SetRasterizerState(D3D11_CULL_NONE);

	this->shader->objectInfo->World = this->world;
	this->shader->objectInfo->view = GDevice.ViewMatrix;
	this->shader->objectInfo->projection = GDevice.ProjectionMatrix;
	this->shader->objectInfo->eye = GDevice.EyeVector;
	this->shader->objectInfo->time = Time;
	this->shader->objectInfo->Update(GDevice.G3D);
	this->shader->SetObjectInfoCB();
	
	this->shader->SetParameter(this->texture0, 0, 1);
	this->shader->SetParameter(this->texture1, 1, 1);
	this->shader->SetParameter(this->texture2, 2, 1);

	this->shader->Apply();
	{
		this->squareObj->Render(GDevice.G3D.context.Get());
	}
}
void Billboard::Unload()
{
	SafeUnload(this->shader);
}
