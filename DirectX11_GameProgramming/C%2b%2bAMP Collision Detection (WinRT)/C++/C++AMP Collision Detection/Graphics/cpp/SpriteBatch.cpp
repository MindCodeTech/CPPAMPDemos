/*
	FOR GETTING MORE INFORMATION ABOUT THIS CODE PLEASE CHECK http://directx11-1-gameprogramming.azurewebsites.net/
	THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF
	ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO
	THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A
	PARTICULAR PURPOSE.
	Copyright (c) Microsoft Corporation. All rights reserved

	File Name        : SpriteBatch.cpp
	Generated by     : Pooya Eimandar (http://Pooya-Eimandar.com/)
	File Description :
*/

#include "pch.h"
#include "FrameWork\DXHelper.h"
#include "..\SpriteBatch.h"

#define MISSING_BEGIN_CALL "Begin must be called successfully before a method can be called."
#define MISSING_END_CALL   "Begin cannot be called again until End has been successfully called."

#pragma region Definition of SpriteFont

SpriteFont::SpriteFont()
{
	this->fontStyle.WEIGHT = DWRITE_FONT_WEIGHT_LIGHT;
	this->fontStyle.STYLE = DWRITE_FONT_STYLE_NORMAL;
	this->fontStyle.STRETCH = DWRITE_FONT_STRETCH_NORMAL;
	this->fontStyle.TEXT_ALIGNMENT = DWRITE_TEXT_ALIGNMENT_LEADING;
	this->fontStyle.PARAGRAPH_ALIGNMENT = DWRITE_PARAGRAPH_ALIGNMENT_NEAR;
	this->fontStyle.SIZE = 16.0;
	this->fontStyle.LOCAL = L"en-US";
}

HRESULT SpriteFont::Load(Graphics2D G2D)
{
	auto hr = G2D.writeFactory->CreateTextFormat(
		L"Times New Roman",
		nullptr, 
		fontStyle.WEIGHT,
		fontStyle.STYLE,
		fontStyle.STRETCH,
		fontStyle.SIZE,
		fontStyle.LOCAL,
		&this->font);
	DXHelper::ThrowIfFailed(hr);

	hr = this->font->SetTextAlignment(this->fontStyle.TEXT_ALIGNMENT);
	DXHelper::ThrowIfFailed(hr);

	hr = this->font->SetParagraphAlignment(this->fontStyle.PARAGRAPH_ALIGNMENT);
	DXHelper::ThrowIfFailed(hr);

	hr = SetColor(G2D, ColorF::White);
	DXHelper::ThrowIfFailed(hr);
	
	return hr;
}

HRESULT SpriteFont::SetColor(Graphics2D G2D, ColorF color)
{
	return G2D.context->CreateSolidColorBrush(color, &this->brush);
}

#pragma endregion

#pragma region Definition of SpriteBatch

SpriteBatch::SpriteBatch(Graphics2D G2D) : state(ENDED), BackgroundText(D2D1::RectF(7, 7, 450, 300))
{
	this->G2D = G2D;
	SetBackgroundColor(ColorF(0.3f, 0.3f, 0.3f, 0.5f), ColorF::White);
	auto hr = this->G2D.factory->CreateDrawingStateBlock(&this->stateBlock);
	DXHelper::ThrowIfFailed(hr);
}

void SpriteBatch::SetBackgroundColor(ColorF BackColor, ColorF BorderColor)
{
	auto hr = this->G2D.context->CreateSolidColorBrush(BackColor, &this->BackgroundBrush);
	DXHelper::ThrowIfFailed(hr);

	hr = this->G2D.context->CreateSolidColorBrush(BorderColor, &this->BackgroundBorder);
	DXHelper::ThrowIfFailed(hr);
}

void SpriteBatch::Begin()
{
	if (this->state != ENDED) throw ref new Exception(0, MISSING_END_CALL);
	this->state = STARTED;
	this->G2D.context->SaveDrawingState(this->stateBlock.Get());
	this->G2D.context->BeginDraw();
}

void SpriteBatch::ShowRectangle()
{
	if (this->state != STARTED) throw ref new Exception(0, MISSING_BEGIN_CALL);
	this->G2D.context->DrawRectangle(BackgroundText, this->BackgroundBorder.Get());
	this->G2D.context->FillRectangle(&BackgroundText, this->BackgroundBrush.Get() );
}

HRESULT SpriteBatch::ShowString(String^ text, const XMFLOAT2* position, SpriteFont^ spriteFont)
{
	return ShowString(text, position, nullptr, spriteFont, Matrix3x2F::Identity());
}

HRESULT SpriteBatch::ShowString(String^ text, const XMFLOAT2* position, ID2D1SolidColorBrush* brush, SpriteFont^ spriteFont, Matrix3x2F World)
{
	if (this->state != STARTED) throw ref new Exception(0, MISSING_BEGIN_CALL);

	auto hr = S_FALSE;

	if(!text->Equals(this->text))
	{
		this->text = text;

		hr = this->G2D.writeFactory->CreateTextLayout(
		this->text->Data(),
		this->text->Length(),
		spriteFont->Font,
		4096.0f,
		4096.0f,
		&this->textLayout);
		DXHelper::ThrowIfFailed(hr);
	}

	this->G2D.context->SetTransform(&World);
	this->G2D.context->DrawTextLayout(Point2F(7 + position->x, 7 + position->y), this->textLayout.Get(), brush == nullptr ? spriteFont->Brush : brush );
	return hr;
}

HRESULT SpriteBatch::End()
{
	auto hr = this->G2D.context->EndDraw();
	if (hr != D2DERR_RECREATE_TARGET)
	{
		DXHelper::ThrowIfFailed(hr);
	}

	this->G2D.context->RestoreDrawingState(this->stateBlock.Get());
	this->state = ENDED;
	return hr;
}

#pragma endregion