/*
	FOR GETTING MORE INFORMATION ABOUT THIS CODE PLEASE CHECK http://directx11-1-gameprogramming.azurewebsites.net/
	THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF
	ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO
	THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A
	PARTICULAR PURPOSE.
	Copyright (c) Microsoft Corporation. All rights reserved

	File Name        : Model.h
	Generated by     : Pooya Eimandar (http://Pooya-Eimandar.com/)
	File Description : 
					   This class responsible for loading CMO file. 
	                   The code generated and modified based on 
					   Visual Studio 3D Starter Kit "http://code.msdn.microsoft.com/Visual-Studio-3D-Starter-455a15f1"
*/

#pragma once

#include "Shader.h"

#define MaxTextures  8

struct Triangle
{
	DirectX::XMFLOAT3 points[3];
};

struct BoundingSphere
{
	DirectX::XMFLOAT3 Center;
	float Radius;
	DirectX::XMFLOAT3 Min;
	DirectX::XMFLOAT3 Max;
	BoundingSphere() : Center(0,0,0), Radius(0), Min(0,0,0), Max(0,0,0) {}
};

struct SubMesh
{
	UINT MaterialIndex;
	UINT IndexBufferIndex;
	UINT VertexBufferIndex;
	UINT StartIndex;
	UINT PrimCount;
	SubMesh() : MaterialIndex(0), IndexBufferIndex(0), VertexBufferIndex(0), StartIndex(0), PrimCount(0) {}
};

struct Material
{
	Shader^ shader;
	Texture^ texture;
	Texture^ bumpMap;
	Texture^ specularMap;
	Material() : shader(nullptr), texture(nullptr) {}
};

ref class Model
{
internal:
	bool IsCollide;

	Model();
	void Load(Graphics3D G3D, Shader^ DefaultShader, FILE* f);
	bool IsCollideWith(Model^ model);
	void Update(float time);
	void Render(GraphicsDevice G3D, DirectX::XMFLOAT4X4 world);
	void Unload();

	DirectX::XMFLOAT4 Color;
	DirectX::XMFLOAT3 Rotation;
	property DirectX::XMFLOAT3 Position
	{
		DirectX::XMFLOAT3 get()
		{
			return this->boundingSphere.Center;
		}
		void set(DirectX::XMFLOAT3 val)
		{
			this->boundingSphere.Center = val;
		}
	}
	property DirectX::XMFLOAT4X4 World
	{
		DirectX::XMFLOAT4X4 get()
		{
			return this->world;
		}
	}
	property Platform::String^ BumpMapPath
	{
		Platform::String^ get()
		{
			return this->bumpMapPath;
		}
		void set(Platform::String^ val)
		{
			if(!val->IsEmpty())
			{
				this->bumpMapPath = val;
			}
		}
	}
	property Platform::String^ SpecMapPath
	{
		Platform::String^ get()
		{
			return this->specMapPath;
		}
		void set(Platform::String^ val)
		{
			if(!val->IsEmpty())
			{
				this->specMapPath = val;
			}
		}
	}
public:
	
	property float Radius
	{
		float get()
		{
			return this->boundingSphere.Radius;
		}
	}
	property int Triangles
	{
		int get()
		{
			return this->triangles.size();
		}
	}
private:
	bool loadingComplete;
	Platform::String^ Name;
	DirectX::XMFLOAT4X4 world;
	std::vector<SubMesh> subMeshes;
	std::vector<Material> materials;
	std::vector<ID3D11Buffer*> vertexBuffers;
	std::vector<ID3D11Buffer*> indexBuffers;
	std::vector<Triangle> triangles;
	BoundingSphere boundingSphere;
	UINT stride;
	Platform::String^ bumpMapPath;
	Platform::String^ specMapPath;
};
