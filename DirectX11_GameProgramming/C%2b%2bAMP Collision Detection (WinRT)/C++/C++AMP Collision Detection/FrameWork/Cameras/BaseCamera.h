/*
	FOR GETTING MORE INFORMATION ABOUT THIS CODE PLEASE CHECK http://directx11-1-gameprogramming.azurewebsites.net/
	THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF
	ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO
	THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A
	PARTICULAR PURPOSE.
	Copyright (c) Microsoft Corporation. All rights reserved

	File Name        : BaseCamera.h
	Generated by     : Pooya Eimandar (http://Pooya-Eimandar.com/)
	File Description :
*/
#pragma once

#include "FrameWork\DXHelper.h"

ref class BaseCamera abstract
{
private:
	float aspectRatio;
	float nearPlane;
	float farPlane;
	float fieldOfView;
	DirectX::XMFLOAT3 direction;

internal:
	BaseCamera(float aspectRatio);

	property float AspectRatio
	{
		float get()
		{
			return this->aspectRatio;
		}
		void set(float val)
		{
			this->aspectRatio = val;
			UpdateProjection();
		}
	}
	property DirectX::XMFLOAT4X4 View
	{
		DirectX::XMFLOAT4X4 get()
		{
			return this->viewMatrix;
		}
		void set(DirectX::XMFLOAT4X4 val)
		{
			this->viewMatrix = val;
			UpdateView();
		}
	}
	property DirectX::XMFLOAT4X4 Projection
	{
		DirectX::XMFLOAT4X4 get()
		{
			return this->projectionMatrix;
		}
		void set(DirectX::XMFLOAT4X4 val)
		{
			this->projectionMatrix = val;
			UpdateProjection();
		}
	}
	property DirectX::XMFLOAT3 Position
	{
		DirectX::XMFLOAT3 get()
		{
			return this->position;
		}
		void set(DirectX::XMFLOAT3 val)
		{
			this->position = val;
			UpdateView();
		}
	}
	property float NearPlane
	{
		float get()
		{
			return this->nearPlane;
		}
		void set(float val)
		{
			this->nearPlane = val;
			UpdateProjection();
		}
	}
	property float FarPlane
	{
		float get()
		{
			return this->farPlane;
		}
		void set(float val)
		{
			this->farPlane = val;
			UpdateProjection();
		}
	}
	property float FieldOfView
	{
		float get()
		{
			return this->fieldOfView;
		}
	}
	property DirectX::XMFLOAT3 LookAt
	{
		DirectX::XMFLOAT3 get()
		{
			return this->lookAt;
		}
		void set(DirectX::XMFLOAT3 val)
		{
			lookAt = val;
			UpdateView();
		}
	}
	property DirectX::XMFLOAT3 UpVector
	{
		DirectX::XMFLOAT3 get()
		{
			auto cameraRotatedUp = MathHelper::Transform(Up, this->rotationMatrix);
			return cameraRotatedUp;
		}
	}

private protected:
	DirectX::XMFLOAT3 Up;
	DirectX::XMFLOAT4X4 viewMatrix;
	DirectX::XMFLOAT4X4 projectionMatrix;
	DirectX::XMMATRIX rotationMatrix;
	DirectX::XMFLOAT3 position;
	DirectX::XMFLOAT3 rotation;
	DirectX::XMFLOAT3 lookAt;

	virtual void UpdateView();
	virtual void UpdateProjection();
	virtual void Update();
};
